##讨论课 - 复用产品方案
####参考业界架构，讨论程序的扩展

软件复用包括软件产品复用和软件过程复用两部分。产品复用是指复用已有的软件构件，通过构件集成（组装）得到新系统。基于构建的复用是产品复用的主要形式。
 
#####分布式的以下特性：

#####高可用性：
通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性。 
计算机系统的可靠性用平均无故障时间（MTTF）来度量，即计算机系统平均能够正常运行多长时间，才发生一次故障。系统的可靠性越高，平均无故障时间越长。可维护性用平均维修时间（MTTR）来度量，即系统发生故障后维修和重新恢复正常运行平均花费的时间。系统的可维护性越好，平均维修时间越短。

#####高吞吐量：
一种分布式的消息队列（MQ）实现方案，设计原理参考了Apache的开源项目Kafka及淘宝的开源项目MetaMorphosis，承继了分布式及高性能高吞吐量的特性。CloudMQ实现简单，无Broker设计，可保持消息顺序，采用纯PULL加通知机制几乎避免了消费延迟，采用多分区机制保证提高系统的吞吐量，最大消息数量为数十亿级别，另外还支持延迟消息(比如5分钟之内发生100次更改事件，只推送一次最终结果，大幅减少重复消息)。
使用MQ可以实现高吞吐量。

#####数据存储，分区，一致性，缓存：
分布式缓存具有如下特性: 
为了达到高性能:当传统数据库面临大规模数据访问时,磁盘I/O 往往成为性能瓶颈,从而导致过高的响应延迟.分布式缓存将高速内存作为数据对象的存储介质,数据以key/value 形式存储,理想情况下可以获得DRAM 级的读写性能; 
为了达到动态扩展性:支持弹性扩展,通过动态增加或减少节点应对变化的数据访问负载,提供可预测的性能与扩展性;同时,最大限度地提高资源利用率; 
为了达到高可用性:可用性包含数据可用性与服务可用性两方面.基于冗余机制实现高可用性,无单点失效(single point of failure),支持故障的自动发现,透明地实施故障切换,不会因服务器故障而导致缓存服务中断或数据丢失.动态扩展时自动均衡数据分区,同时保障缓存服务持续可用; 
为了达到易用性:提供单一的数据与管理视图;API 接口简单,且与拓扑结构无关;动态扩展或失效恢复时无需人工配置;自动选取备份节点;多数缓存系统提供了图形化的管理控制台,便于统一维护; 
为了达到分布式代码执行(distributed code execution):将任务代码转移到各数据节点并行执行,客户端聚合返回结果,从而有效避免了缓存数据的移动与传输.最新的Java 数据网格规范JSR-347中加入了分布式代码执行与Map/reduce 的API 支持,各主流分布式缓存产品,如IBM WebSphere eXtreme Scale,VMware GemFire,GigaSpaces XAP 和Red Hat Infinispan 等也都支持这一新的编程模型。


#####系统监控：
监控也是提高整个平台可用性的一个重要手段，多平台进行多个维度的监控；模块在运行时候是透明的，以达到运行期白盒化。
大型分布式系统涉及各种设备，比如网络交换机，普通 PC 机，各种型号的网卡，硬盘，内存等等，还有应用业务层次的监控，数量非常多的时候，出现错误的概率也会变大，并且有些监控的时效性要求比较高，有些达到秒级别；在大量的数据流中需要过滤异常的数据，有时候也对数据会进行上下文相关的复杂计算，进而决定是否需要告警。因此监控平台的性能、吞吐量、已经可用性就比较重要，需要规划统一的一体化的监控平台对系统进行各个层次的监控。

#####通信可靠高效：
  一种分布式系统中的节点间可靠通信方法，涉及网络通信领域，其具体步骤为：步骤1，为每个节点配置两块网卡；步骤2，建立双链路：当任意两个节点需要通信前，先通过链路控制消息建立可用的逻辑链接并协商相关数据；步骤3，备份式通信：当A链路正常时，任意两个节点间的通信都通过A链路传递；当A链路出现问题或拥塞时，自动切换至B链路上传递；当链路中没有需要传输的用户数据时，定时发送心跳消息确保链路始终可用；否则，通过IPC消息传递节点间的用户数据。本发明所述的分布式系统中的节点间可靠通信方法，在UDP协议上，利用其优点，设计可靠通信机制，用于分布式系统节点间通信，实现了消息的可靠传输，保证节点间通信的质量。

#####消息队列：
使用消息队列的好处：
2.1、提高系统响应速度
使用了消息队列，生产者一方，把消息往队列里一扔，就可以立马返回，响应用户了。无需等待处理结果。
处理结果可以让用户稍后自己来取。也可以让生产者订阅，有结果了通知。获得约定将结果放在某处，无需通知。
2.2、提高系统稳定性
    考虑客户端想服务端通信，发送数据给服务端的情况。 
    客户端和服务端之间的网络有可能掉线，生产系统可能会因维护等原因暂停服务。两个系统间不应该如此紧密耦合。应该通过消息队列解耦。同时让系统更健壮、稳定。

#####安全：
分布式系统中的安全可以分为两部分。
一部分涉及可能处于不同机器上的用户或进程之间的通信。确保安全通信的主要机制是安全通道机制。安全通道更明确的说是身份验证、消息完整性以及机密性。另一部分涉及授权，用以确保进程只获得授予它的对分布式系统内资源的访问权限。
安全通道和访问控制需要分发加密密匙的机制，还需要向系统中添加或从系统中删除用户的机制。

#####任务调度：
将任务按特定规则（负载均衡，地域原则等）分配到多个结点执行的调度框架。支持Crontab标准的任务重复和定时策略，支持海量定时任务（千万级），保证任务处理的实时性和顺序性，支持实时查询任务状态或中止任务。任务调度吞吐量可达2万每秒。

#####对websocket实现负载均衡：
用1.3以后的版本的nginx，原生支持websocket反向代理；压力测试可以用jmeter+第三方websocket插件。
根据指定的key对websocket连接进行负载均衡，达到一致性哈希的效果。
#####ID分配
将 id 分配分为两层：
1.上层的“id 分配器”对应用暴露，提供一次申请一个 id 的接口，一般本 IDC 的应用只连本IDC 的 id 分配器。
2.下层的“段分配器”对“id 分配器”提供服务。id 分配器“知晓”所有 IDC 的所有段分配
器的存在，使用均衡策略向段分配器申请一个 id 段，当所持有的 id 段快耗尽时，再请求下一个段。
唯一性：全局中，根据分片规则，每个段分配器会持有不同的 id 段。例如下表中，每个段的大小是 100，段分配器 A 持有分片 0 和分片 1。对于每个分片而言，是一个个跳跃的 id 段。特殊的，当段大小为 1 时，段分配器就是改进前的 id 分配器。
均衡策略：均衡策略在 id 分配器来实现，简单的讲，是一个轮询策略。每个 id 分配器会轮询下游段分配器的状态，并选中 id 段的最小的那个，然后发起 id 段申请。由于不会加锁，当多个 id 分配器同时竞争时，可能会出现获取的 id 段不是全局最小的，可以附加一些策略来调优，比如再多获取一次，并本地排序。从整体上而言，id 还是比较均衡的，可满足需求。
可用性：当发生网络划分时，本 IDC 的 id 分配器可以只连接本 IDC 的段分配器，成功的申请到 id 段。整个系统可容忍一定时间内不可协作，长时间不可协作的唯一危害是 id 增长不均衡，此时，就退化为改进前的方案。
多 IDC 环境的适应性：id 分配器需要和所有 IDC 的段分配器交互，但是交互频率很低，同时和提供 id 分配服务是两个独立的阶段，不会受到多 IDC 网络环境的干扰。


